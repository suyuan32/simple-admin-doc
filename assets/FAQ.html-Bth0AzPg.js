import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c,a as e,f as a,b as t,e as n}from"./app-BbTbWlJo.js";const p={},r=n(`<h2 id="默认账号是什么" tabindex="-1"><a class="header-anchor" href="#默认账号是什么"><span>默认账号是什么？</span></a></h2><p>A: 账号: admin 密码: simple-admin</p><h2 id="注册的账号不能登录" tabindex="-1"><a class="header-anchor" href="#注册的账号不能登录"><span>注册的账号不能登录?</span></a></h2><p>A: 默认注册成功后的角色是会员，没有登录的权限。你需要修改角色权限或者将用户的角色设置为管理员.</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>新版本已支持配置默认注册用户的角色部门以及职位， 通过 ProjectConf 控制</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">ProjectConf</span><span class="token punctuation">:</span>
  <span class="token key atrule">DefaultRoleId</span><span class="token punctuation">:</span> <span class="token number">2</span>
  <span class="token key atrule">DefaultDepartmentId</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">DefaultPositionId</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="go-zero-有几种服务注册发现方式" tabindex="-1"><a class="header-anchor" href="#go-zero-有几种服务注册发现方式"><span>go-zero 有几种服务注册发现方式？</span></a></h2>`,6),d={href:"https://mp.weixin.qq.com/s/-WaWJaM_ePEQOf7ExNJe7w",target:"_blank",rel:"noopener noreferrer"},u=n(`<h2 id="empty-etcd-hosts-错误如何处理" tabindex="-1"><a class="header-anchor" href="#empty-etcd-hosts-错误如何处理"><span><code>empty etcd hosts</code> 错误如何处理？</span></a></h2><p>A: <code>empty etcd hosts</code> 错误是由于配置文件 中的 <code>RPC</code> 配置错误时才会出现，出现该错误请检查 <code>yaml</code> 文件中的所有 <code>RPC</code> 配置如 <code>CoreRpc</code>。</p><h2 id="如何处理跨域问题" tabindex="-1"><a class="header-anchor" href="#如何处理跨域问题"><span>如何处理跨域问题？</span></a></h2><p>A: 修改 api/core.go</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>server <span class="token operator">:=</span> rest<span class="token punctuation">.</span><span class="token function">MustNewServer</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>RestConf<span class="token punctuation">,</span> rest<span class="token punctuation">.</span><span class="token function">WithCors</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <code>*</code> 为自己的域名或 IP,默认为<code>*</code>，允许所有。</p><h2 id="如何同步-fork-仓库" tabindex="-1"><a class="header-anchor" href="#如何同步-fork-仓库"><span>如何同步 fork 仓库?</span></a></h2><blockquote><p>给 fork 配置远程库,先查看远程状态</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>确定一个将被同步给 fork 远程的上游仓库, upstream 后的地址是你即将同步的 git 地址</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> upstream https://github.com/suyuan32/simple-admin-core.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>开始同步 fork</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch upstream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>切换到本地主分支</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>把 upstream/master 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> merge upstream/master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="如何获取环境变量" tabindex="-1"><a class="header-anchor" href="#如何获取环境变量"><span>如何获取环境变量？</span></a></h2><p>只需要在 <code>config.go</code> 的变量中声明 <code>env</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>
     ServiceName <span class="token builtin">string</span> <span class="token string">\`json:&quot;,env=SERVICE_NAME&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何配置-windows-环境" tabindex="-1"><a class="header-anchor" href="#如何配置-windows-环境"><span>如何配置 Windows 环境？</span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>先自行下载 windows 下的 golang exe 安装包安装</p></div>`,22),m=e("strong",null,[a("首先安装 "),e("code",null,"git"),a(" , 我们需要 "),e("code",null,"git bash"),a(" 命令行执行 linux 命令")],-1),h=e("br",null,null,-1),k=e("code",null,"make",-1),v={href:"https://chocolatey.org/install#individual",target:"_blank",rel:"noopener noreferrer"},g=n(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 在管理员状态下的 POWERSHELL 执行</span>

Set-ExecutionPolicy Bypass <span class="token parameter variable">-Scope</span> Process -Force<span class="token punctuation">;</span> <span class="token punctuation">[</span>System.Net.ServicePointManager<span class="token punctuation">]</span>::SecurityProtocol <span class="token operator">=</span> <span class="token punctuation">[</span>System.Net.ServicePointManager<span class="token punctuation">]</span>::SecurityProtocol <span class="token parameter variable">-bor</span> <span class="token number">3072</span><span class="token punctuation">;</span> iex <span class="token variable"><span class="token punctuation">((</span>New<span class="token operator">-</span>Object System.Net.WebClient<span class="token punctuation">)</span>.DownloadString<span class="token punctuation">(</span>&#39;https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>community.chocolatey.org<span class="token operator">/</span>install.ps1&#39;<span class="token punctuation">))</span></span>

<span class="token comment">## 然后执行</span>

choco <span class="token function">install</span> <span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>安装完成 <code>make</code> 后重启 IDE 即可，IDE 的命令行均选择 <code>git bash</code></p></blockquote><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>git bash</code> 下的路径使用 <code>/</code> 分隔， windows 默认为 <code>\\</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>goctls api proto <span class="token parameter variable">--proto</span><span class="token operator">=</span>D:/projects/simple-admin-example-rpc/example.proto <span class="token parameter variable">--style</span><span class="token operator">=</span>go_zero <span class="token parameter variable">--api_service_name</span><span class="token operator">=</span>example <span class="token parameter variable">--rpc_service_name</span><span class="token operator">=</span>example <span class="token parameter variable">--o</span><span class="token operator">=</span>./ <span class="token parameter variable">--model</span><span class="token operator">=</span>Student <span class="token parameter variable">--rpc_name</span><span class="token operator">=</span>Example <span class="token parameter variable">--grpc_package</span><span class="token operator">=</span>github.com/suyuan32/simple-admin-example-rpc/example
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h2 id="菜单有哪些特殊组件" tabindex="-1"><a class="header-anchor" href="#菜单有哪些特殊组件"><span>菜单有哪些特殊组件？</span></a></h2><ul><li>LAYOUT - 当菜单为目录时，组件需要设置为 LAYOUT</li><li>IFrame - 当菜单为 Iframe 时需要设置为 Iframe, 内嵌和外链都需要设置为 Iframe</li></ul><h2 id="如何在本地开发多个相互依赖的项目" tabindex="-1"><a class="header-anchor" href="#如何在本地开发多个相互依赖的项目"><span>如何在本地开发多个相互依赖的项目？</span></a></h2><p>使用工作区模式， 在 go 1.18 后有了 workspace 模式， 只需要将 api 和 rpc 项目放在同一个文件夹下，执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 例如将多个项目放在一个位置进行开发</span>
go work init simple-admin-common/ simple-admin-core/ simple-admin-tools/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>即可在本地获取最新代码变化，而不需要提交仓库。</p><h2 id="如何调试-backend-ui" tabindex="-1"><a class="header-anchor" href="#如何调试-backend-ui"><span>如何调试 Backend UI ?</span></a></h2><ul><li>首先运行项目，执行 <code>pnpm dev</code></li><li>然后设置断点并在 vscode 按 <code>F5</code> 即可调试</li></ul>`,11);function b(f,y){const s=l("ExternalLinkIcon");return i(),c("div",null,[r,e("p",null,[a("A： 3 种 "),e("a",d,[a("go-zero"),t(s)])]),u,e("blockquote",null,[e("p",null,[m,a(),h,e("strong",null,[a("其次需要安装 "),k,a(" 命令， 我们通过 "),e("a",v,[a("Chocolatey"),t(s)]),a(" 进行安装")])])]),g])}const w=o(p,[["render",b],["__file","FAQ.html.vue"]]),A=JSON.parse('{"path":"/zh/guide/FAQ.html","title":"常见问题","lang":"zh-CN","frontmatter":{"order":6,"title":"常见问题","description":"默认账号是什么？ A: 账号: admin 密码: simple-admin 注册的账号不能登录? A: 默认注册成功后的角色是会员，没有登录的权限。你需要修改角色权限或者将用户的角色设置为管理员. 相关信息 新版本已支持配置默认注册用户的角色部门以及职位， 通过 ProjectConf 控制 go-zero 有几种服务注册发现方式？ A： 3 种 g...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://doc.ryansu.tech/guide/FAQ.html"}],["meta",{"property":"og:url","content":"https://doc.ryansu.tech/zh/guide/FAQ.html"}],["meta",{"property":"og:site_name","content":"Simple Admin"}],["meta",{"property":"og:title","content":"常见问题"}],["meta",{"property":"og:description","content":"默认账号是什么？ A: 账号: admin 密码: simple-admin 注册的账号不能登录? A: 默认注册成功后的角色是会员，没有登录的权限。你需要修改角色权限或者将用户的角色设置为管理员. 相关信息 新版本已支持配置默认注册用户的角色部门以及职位， 通过 ProjectConf 控制 go-zero 有几种服务注册发现方式？ A： 3 种 g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-17T03:19:30.000Z"}],["meta",{"property":"article:author","content":"Ryan SU"}],["meta",{"property":"article:modified_time","content":"2024-04-17T03:19:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-17T03:19:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ryan SU\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]]},"headers":[{"level":2,"title":"默认账号是什么？","slug":"默认账号是什么","link":"#默认账号是什么","children":[]},{"level":2,"title":"注册的账号不能登录?","slug":"注册的账号不能登录","link":"#注册的账号不能登录","children":[]},{"level":2,"title":"go-zero 有几种服务注册发现方式？","slug":"go-zero-有几种服务注册发现方式","link":"#go-zero-有几种服务注册发现方式","children":[]},{"level":2,"title":"empty etcd hosts 错误如何处理？","slug":"empty-etcd-hosts-错误如何处理","link":"#empty-etcd-hosts-错误如何处理","children":[]},{"level":2,"title":"如何处理跨域问题？","slug":"如何处理跨域问题","link":"#如何处理跨域问题","children":[]},{"level":2,"title":"如何同步 fork 仓库?","slug":"如何同步-fork-仓库","link":"#如何同步-fork-仓库","children":[]},{"level":2,"title":"如何获取环境变量？","slug":"如何获取环境变量","link":"#如何获取环境变量","children":[]},{"level":2,"title":"如何配置 Windows 环境？","slug":"如何配置-windows-环境","link":"#如何配置-windows-环境","children":[]},{"level":2,"title":"菜单有哪些特殊组件？","slug":"菜单有哪些特殊组件","link":"#菜单有哪些特殊组件","children":[]},{"level":2,"title":"如何在本地开发多个相互依赖的项目？","slug":"如何在本地开发多个相互依赖的项目","link":"#如何在本地开发多个相互依赖的项目","children":[]},{"level":2,"title":"如何调试 Backend UI ?","slug":"如何调试-backend-ui","link":"#如何调试-backend-ui","children":[]}],"git":{"createdTime":1671464359000,"updatedTime":1713323970000,"contributors":[{"name":"Ryan SU","email":"yuansu.china.work@gmail.com","commits":7},{"name":"Ryan SU","email":"1137661202@qq.com","commits":3},{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":2}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"zh/guide/FAQ.md","localizedDate":"2022年12月19日","autoDesc":true,"excerpt":"<h2>默认账号是什么？</h2>\\n<p>A: 账号: admin 密码: simple-admin</p>\\n<h2>注册的账号不能登录?</h2>\\n<p>A: 默认注册成功后的角色是会员，没有登录的权限。你需要修改角色权限或者将用户的角色设置为管理员.</p>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>新版本已支持配置默认注册用户的角色部门以及职位， 通过 ProjectConf 控制</p>\\n<div class=\\"language-yaml\\" data-ext=\\"yml\\" data-title=\\"yml\\"><pre class=\\"language-yaml\\"><code><span class=\\"token key atrule\\">ProjectConf</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token key atrule\\">DefaultRoleId</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">2</span>\\n  <span class=\\"token key atrule\\">DefaultDepartmentId</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">1</span>\\n  <span class=\\"token key atrule\\">DefaultPositionId</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">1</span>\\n</code></pre></div></div>"}');export{w as comp,A as data};
